[mcu]
##	[X in MOTOR0] - B Motor
##	[Y in MOTOR1] - A Motor
##	[E in MOTOR6] - Extruder
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_29003C00145053424E363620-if00
restart_method: command
##--------------------------------------------------------------------

[mcu rpi]
serial: /tmp/klipper_host_mcu

[mcu SB2040v1]
canbus_uuid: 9d32b8281694

[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 3000             #Max 4000
max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
# 	Includes
#####################################################################
[include mainsail.cfg]
[include fly_sb2040_v2.cfg]
[include configs/*.cfg]
[include macros/*.cfg]
[include scripts/*.cfg]
[include scripts/*.py]
[include K-ShakeTune/*.cfg]
[include KAMP_Settings.cfg]
[include shell_command.cfg]

# Enable object exclusion
[exclude_object]

# Enable arcs support
[gcode_arcs]
resolution: 0.5

[respond]
default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".

[delayed_gcode set_sb_leds_on_boot]
initial_duration: 1
gcode:
        status_ready

################ STEPPERS ################
## X Stepper on MOTOR0(B Motor)
[stepper_x]
step_pin: PF13
dir_pin: !PF12
enable_pin: !PF14
endstop_pin: SB2040v1:LIMIT_2
rotation_distance: 40
microsteps: 32 #16 Default
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
position_min: 0
position_endstop: 305
position_max: 305
homing_speed: 50   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

## Y Stepper on MOTOR1 (A Motor)
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32 #16 Default
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG9
position_min: 0
position_endstop: 297
position_max: 300
homing_speed: 50  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

## Z0 Stepper - Front Left
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32 #16 Default
endstop_pin: probe:z_virtual_endstop
#endstop_pin: PG10
position_max: 300
position_min: -6
homing_speed: 20
second_homing_speed: 3
homing_retract_dist: 3

##	Z1 Stepper - Rear Left
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32 #16 Default

##	Z2 Stepper - Rear Right
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32 #16 Default

##	Z3 Stepper - Front Right
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32 #16 Default

################ UART ################
## X Stepper on MOTOR0(B Motor)
[tmc2209 stepper_x]
uart_pin: PC4
interpolate: true
run_current: 0.8 #1.2 max
sense_resistor: 0.110
stealthchop_threshold: 0

## Y Stepper on MOTOR1 (A Motor)
[tmc2209 stepper_y]
uart_pin: PD11
interpolate: true
run_current: 0.8 #1.2 max
sense_resistor: 0.110
stealthchop_threshold: 0

## Z0 Stepper - Front Left on MOTOR2_1
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: true
run_current: 1 #1.2 max
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z1 Stepper - Rear Left on MOTOR3
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: true
run_current: 1 #1.2 max
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z2 Stepper - Rear Right on MOTOR4
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: true
run_current: 1 #1.2 max
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z3 Stepper - Front Right on MOTOR5
[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: true
run_current: 1 #1.2 max
sense_resistor: 0.110
stealthchop_threshold: 0

################ EXTRUDER ################
#	E0 on MOTOR6
[extruder]
step_pin: SB2040v1:EXT_STEP
dir_pin: SB2040v1:EXT_DIR
enable_pin: !SB2040v1:EXT_EN
##	Update value below when you perform extruder calibration
##	If you ask for 100mm of filament, but in reality it is 98mm:
##	rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point

##  Galileo 2 Settings
rotation_distance: 47.088			#G2
gear_ratio: 9:1						#G2
microsteps: 16 						#G2 							
full_steps_per_rotation: 200				#200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: SB2040v1:HE0
sensor_pin: SB2040v1:TH0
sensor_type: Generic 3950			# SliceClone
# sensor_type: 104NT-4-R025H42G				# Revo Micro
min_temp: 10
max_temp: 270
max_power: 1.0
min_extrude_temp: 140
max_extrude_cross_section: 50				# Revo Micro 0.8 NOZZLE
pressure_advance: 0.035 # Default Settings
##	Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040
pwm_cycle_time: 0.01666

# [thermistor 104NT-4-R025H42G]
# temperature1: 25.0
# resistance1: 100000.0
# temperature2: 160.0
# resistance2: 1074.0
# temperature3: 300.0
# resistance3: 82.78

## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "ATC Semitec 104NT-4-R025H42G"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"

##	E0 on MOTOR6
[tmc2209 extruder]
uart_pin: SB2040v1:EXT_UART
interpolate: true
run_current: 0.6 #Galileo2
# run_current: 0.3 #0.4 CW2
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 0

################ BED HEATER ################
[heater_bed]
##	SSR Pin - BED_OUT
heater_pin: PA1
sensor_type: Generic 3950
sensor_pin: PF3
##  Adjust max_power so it doesn't exceed the SSR rating. The Omron G3NA-210B-DC5 SSR is rated at 4 amps without a heatsink.
##  The formula is "4 / (Wattage_of_bed_heater / Mains_voltage) = max_power"
##  If max_power is greater than 1.0, use 1.0
max_power: 1 #0.8
min_temp: 0
max_temp: 120
pwm_cycle_time: 0.01666

#####################################################################
#   Probe
#####################################################################
[probe]
##	Inductive Probe
##	This probe is not used for Z height, only Quad Gantry Leveling

# Select the probe port by type:
## For the PROBE port; use this with the original OMRON sensor.
#pin: ~!PB7
## For the spare endstop port; use this with the Fotek PL-05N (or generic) inductive probe
#pin: ^PG11
## Tap port
#pin: PG13

#--------------------------------------------------------------------
pin: ^SB2040v1:LIMIT_1
y_offset: 0
x_offset: 0
#z_offset: 0
speed: 5.0
lift_speed: 21 # 10
samples:2 # 2
samples_result: median
sample_retract_dist: 2 # 3.0 omron probe
samples_tolerance: 0.007
samples_tolerance_retries: 3
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

################ BTT SFS V2.0 FILAMENT SENSOR ################
# [filament_switch_sensor switch_sensor] 
# switch_pin: ^PG12
# pause_on_runout: False
# runout_gcode:
#     PAUSE # [pause_resume] is required in printer.cfg
#     M117 Filament switch runout
# insert_gcode:
#     M117 Filament switch inserted
 
# [filament_motion_sensor encoder_sensor]
# switch_pin: ^PG13
# detection_length: 2.88 # accuracy of motion sensor 2.88mm
# extruder: extruder
# pause_on_runout: False
# runout_gcode:
#     PAUSE # [pause_resume] is required in printer.cfg
#     M117 Filament encoder runout
# insert_gcode:
#     M117 Filament encoder inserted

################ FANS ################
[heater_fan hotend_fan]
##	Hotend Fan
pin: SB2040v1:FAN1
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
shutdown_speed: 1.0
##	If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[fan]
##	Print Cooling Fan
pin: SB2040v1:FAN0
kick_start_time: 0.5
cycle_time: 0.15
off_below: 0.10

[controller_fan controller_fan]
##	Controller fan - CNC_FAN2 - Skirt fans
pin: PD12
kick_start_time: 1.0
cycle_time: 0.15
heater: heater_bed
# heater_temp: 30.0
max_power: 1.0
shutdown_speed: 0.0

[duplicate_pin_override]
pins: PD12, PD13 # this is the pin number that controller_fan uses in printer.cfg

[fan_generic cpu_fans]
pin: PD12

[delayed_gcode skirt_fan_boot]
initial_duration: 1.0
gcode:
    {% set octo = printer["temperature_sensor octopus"] %}
    {% if printer.print_stats-state|lower != "printing" %}
       SET_FAN_SPEED FAN=cpu_fans SPEED=1
    {% endif %}
       UPDATE_DELAYED_GCODE ID=skirt_fan DURATION=5


# Pi temperature monitoring loop. Check temp every 5 minutes & turn on skirt fans if too hot. Turn off if cool.
[delayed_gcode skirt_fan]
gcode:
    {% if printer.print_stats.state|lower != "printing" %}
    {% if printer['temperature_sensor octopus'].temperature >= 30 %}
       SET_FAN_SPEED FAN=cpu_fans SPEED=1
    {% elif printer['temperature_sensor octopus'].temperature < 30 %}
       SET_FAN_SPEED FAN=cpu_fans SPEED=0
    {% endif %}
    {% else %}
       SET_FAN_SPEED FAN=cpu_fans SPEED=1
    {% endif %}
       UPDATE_DELAYED_GCODE ID=skirt_fan DURATION=300

#SB2040 3007 Cooling Fan
[fan_generic sb_fan]
pin: SB2040v1:FAN2
kick_start_time: 1
max_power: 1.0
shutdown_speed: 0.0

[fan_generic pi_fan]
pin: PD15
kick_start_time: 1.0
max_power: 0.5 #0.4
shutdown_speed: 0.0

[heater_fan nevermore]
pin: PD13
max_power: 1.0
kick_start_time: 0.5
heater: heater_bed
heater_temp: 90.0
shutdown_speed: 1.0
##	If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

################ TEMPERATURE SENSORS ################
[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 70

[temperature_sensor octopus]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 70

[temperature_sensor chamber]
sensor_type: Generic 3950 #ATC Semitec 104GT-2
sensor_pin: PF4
gcode_id: chamber

[temperature_sensor frame]
sensor_type: Generic 3950
sensor_pin: PF5

[temperature_sensor SB2040v1]
sensor_type: temperature_mcu
sensor_mcu: SB2040v1

## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "ATC Semitec 104NT-4-R025H42G"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"

#####################################################################
#   LED Control
#####################################################################
[output_pin caselight]
# Chamber Lighting - HE1 Connector (Optional)
pin: PB11
pwm:true
cycle_time: 0.01

[delayed_gcode caselight]
initial_duration: 1
gcode:
    SET_PIN PIN=caselight VALUE=1

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 60 #1800

################ SAFE Z ################
[safe_z_home]
home_xy_position: 150,150
speed:100
z_hop:10

################ QGL ################
[quad_gantry_level]
gantry_corners:
	-60,-10
	360,370
##	Probe points
points:
	75,25
	75,250
	225,250
	225,25

speed: 500
horizontal_move_z: 12
retries: 3
retry_tolerance: 0.0075
max_adjust: 10

################ BED MESH################
[bed_mesh]
speed: 1000
horizontal_move_z: 5
mesh_min: 40, 40
mesh_max: 270, 270
probe_count: 15, 15
#adaptive_margin: 5
# mesh_pps: 0, 0
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.5
# algorithm: lagrange #5, 5
#relative_reference_index: 612
# relative_reference_index: 12 # 5,5
move_check_distance: 3
# split_delta_z: 0.01
split_delta_z: .0125
fade_start: 1
fade_end: 10 

################ FIRMWARE RETRACTION ################
[firmware_retraction]
retract_length: 1
retract_speed: 30
unretract_extra_length: 0
unretract_speed: 30

################ TEST PROBE ACCURACY ################
[gcode_macro TEST_PROBE_ACCURACY]
# Continuously run PROBE_ACCURACY while:
#     - idling for START_IDLE_MINUTES
#     - heating the bed to BED_TEMP
#     - once at BED_TEMP, letting the bed soak for BED_SOAK_MINUTES
#     - with the bed still on, heating the extruder to EXTRUDER_TEMP
#     - once at EXTRUDER_TEMP, letting the extruder soak for EXTRUDER_SOAK_MINUTES
#     - turning off the heaters, and idling for END_IDLE_MINUTES
variable_start_idle_minutes: 0
variable_bed_temp: 0
variable_extruder_temp: 0
variable_bed_soak_minutes: 0
variable_extruder_soak_minutes: 0
variable_dwell_seconds: 0
variable_dwell_lift_z: 0
variable_end_idle_minutes: 0
variable_state: 'start'
variable_next_state: 'none'
gcode:
    # Copy parameters into gcode variables.
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }

    # Initialize state variables in case they have old values from last run.
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"start"'
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE='"none"'

    # Schedule main loop.
    UPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1


[delayed_gcode probe_accuracy_loop]
gcode:
    {% set tmacro = printer['gcode_macro TEST_PROBE_ACCURACY'] %}

    {% if tmacro.state == 'start' %}
        { action_respond_info('TEST_PROBE_ACCURACY: START') }
        SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"start_idle"'
        SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE='"start_idle_done"'
        UPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }

    {% elif tmacro.state == 'start_idle_done' %}
        {% if tmacro.bed_temp >= 0 %}
            M140 S{ tmacro.bed_temp }
            { action_respond_info('TEST_PROBE_ACCURACY: BED HEATING TO %s' % tmacro.bed_temp) }
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"bed_heating"'
        {% else %}
            # Skip heating and soaking the bed, go directly to bed_soaked state.
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"bed_soaked"'
        {% endif %}

    {% elif tmacro.state == 'bed_heating' %}
        {% if printer.heater_bed.temperature >= tmacro.bed_temp %}
            { action_respond_info('TEST_PROBE_ACCURACY: BED HEATED TO %s' % tmacro.bed_temp) }
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"bed_soaking"'
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE='"bed_soaked"'
            UPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }
        {% endif %}

    {% elif tmacro.state == 'bed_soaked' %}
        {% if tmacro.bed_temp >= 0 %}
            { action_respond_info('TEST_PROBE_ACCURACY: BED SOAKED') }
        {% endif %}
        {% if tmacro.extruder_temp >= 0 %}
            M104 S{ tmacro.extruder_temp }
            { action_respond_info('TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s' % tmacro.extruder_temp) }
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"extruder_heating"'
        {% else %}
            # Skip heating and soaking the extruder, go directly to extruder_soaked state.
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"extruder_soaked"'
        {% endif %}

    {% elif tmacro.state == 'extruder_heating' %}
        {% if printer.extruder.temperature >= tmacro.extruder_temp %}
            { action_respond_info('TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s' % tmacro.extruder_temp) }
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"extruder_soaking"'
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE='"extruder_soaked"'
            UPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }
        {% endif %}

    {% elif tmacro.state == 'extruder_soaked' %}
        {% if tmacro.extruder_temp >= 0 %}
            { action_respond_info('TEST_PROBE_ACCURACY: EXTRUDER SOAKED') }
        {% endif %}
        TURN_OFF_HEATERS
        SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"end_idle"'
        SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE='"done"'
        UPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }

    {% elif tmacro.state == 'done' %}
        { action_respond_info('TEST_PROBE_ACCURACY: DONE') }
        G90
        G1 Z30
        UPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0

    {% endif %}

    {% if tmacro.state != 'done' %}
        M105
        PROBE_ACCURACY
        {% if tmacro.dwell_lift_z >= 0 %}
            G1 Z{ tmacro.dwell_lift_z }
        {% endif %}
        M400
        UPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }
    {% endif %}

[delayed_gcode probe_accuracy_set_next_state]
gcode:
    {% set tmacro = printer['gcode_macro TEST_PROBE_ACCURACY'] %}
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"{ tmacro.next_state }"'

#####################################################################
#   Display
#####################################################################
[neopixel btt_mini12864]
##	To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0.0
initial_GREEN: 0.78
initial_BLUE: 1.0
color_order: RGB

##	Set RGB values on boot up for each Neopixel. 
##	Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=btt_mini12864 RED=0 GREEN=0.78 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0 GREEN=0.78 BLUE=1 INDEX=3 

#--------------------------------------------------------------------

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 30.722
#*# pid_ki = 4.180
#*# pid_kd = 56.452
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 40.569
#*# pid_ki = 0.717
#*# pid_kd = 573.537
#*#
#*# [probe]
#*# z_offset = -1.620
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.020000, 0.021875, 0.022500
#*# 	0.026250, -0.001250, 0.006250
#*# 	-0.002500, 0.013125, 0.008125
#*# tension = 0.5
#*# min_x = 141.4
#*# algo = lagrange
#*# y_count = 3
#*# mesh_y_pps = 2
#*# min_y = 141.4
#*# x_count = 3
#*# max_y = 168.58
#*# mesh_x_pps = 2
#*# max_x = 168.58
#*#
#*# [bed_mesh ABS]
#*# version = 1
#*# points =
#*# 	-0.027800, -0.004675, 0.019075, 0.017825, 0.022200, 0.026575, 0.050325, 0.023450, 0.032200, 0.035950, 0.019075, 0.016575, -0.004675, -0.017175, -0.068425
#*# 	-0.024675, 0.005950, 0.013450, 0.022825, 0.025325, 0.027200, 0.029075, 0.016575, 0.048450, 0.036575, 0.035325, 0.016575, -0.003425, -0.019675, -0.051550
#*# 	0.009075, 0.004075, 0.034700, 0.026575, 0.030325, 0.049700, 0.028450, 0.029700, 0.033450, 0.053450, 0.037825, 0.032200, -0.011550, -0.004675, -0.020925
#*# 	0.004075, 0.016575, 0.031575, 0.020950, 0.015325, 0.030325, 0.026575, 0.048450, 0.056575, 0.034700, 0.027200, 0.026575, -0.005300, -0.025925, -0.026550
#*# 	-0.013425, -0.007175, -0.009675, -0.007175, -0.013425, 0.020950, 0.017200, 0.022825, 0.047200, 0.017825, 0.020950, 0.027200, -0.007175, -0.015925, -0.044675
#*# 	-0.019675, -0.013425, 0.005950, -0.010300, 0.024700, 0.047825, 0.012825, 0.029075, 0.018450, 0.022825, 0.021575, 0.007200, -0.001550, -0.019675, -0.015925
#*# 	-0.024675, -0.012800, -0.003425, -0.015300, -0.001550, 0.007200, 0.009700, 0.032825, 0.015325, 0.024075, 0.027200, 0.014700, -0.009675, -0.015925, -0.057175
#*# 	-0.059675, -0.046550, -0.038425, -0.042800, -0.010300, -0.005300, -0.011550, -0.023425, -0.017175, -0.012800, -0.007800, -0.025300, -0.044050, -0.055300, -0.071550
#*# 	-0.067175, -0.062175, -0.025925, -0.027175, -0.022800, -0.015925, -0.010925, -0.015300, -0.010925, -0.017800, 0.008450, -0.021550, -0.040925, -0.044675, -0.055300
#*# 	-0.066550, -0.044675, -0.017175, -0.019675, 0.014700, -0.014050, 0.018450, -0.003425, -0.010300, 0.000950, -0.009675, -0.024050, -0.024675, -0.041550, -0.050925
#*# 	-0.070300, -0.052175, -0.024050, -0.022800, -0.030300, -0.022175, -0.014050, -0.007800, -0.008425, -0.009050, -0.017800, -0.025925, -0.027175, -0.058425, -0.072175
#*# 	-0.087800, -0.045300, -0.025300, -0.014050, -0.022800, 0.008450, -0.015300, -0.012800, -0.004050, -0.002800, -0.011550, -0.012175, -0.019675, -0.055925, -0.075300
#*# 	-0.029675, -0.041550, -0.012800, -0.003425, -0.006550, -0.014675, -0.006550, 0.025950, 0.025325, -0.014675, 0.013450, -0.017175, -0.045300, -0.050925, -0.072800
#*# 	-0.064050, -0.030300, -0.020300, 0.004075, 0.011575, 0.020325, 0.009700, 0.014075, -0.005300, -0.004675, 0.027825, -0.023425, -0.018425, -0.041550, -0.070925
#*# 	-0.056550, -0.039675, -0.025300, -0.008425, 0.013450, 0.017200, 0.025950, 0.019700, 0.017200, 0.028450, 0.012825, -0.015925, -0.010925, -0.026550, -0.054050
#*# x_count = 15
#*# y_count = 15
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.5
#*# min_x = 40.0
#*# max_x = 269.88
#*# min_y = 40.0
#*# max_y = 269.88
#*#
#*# [bed_mesh PLA]
#*# version = 1
#*# points =
#*# 	-0.041250, -0.036250, -0.011875, -0.020625, -0.028125, -0.001250, 0.022500, -0.029375, 0.003750, 0.009375, 0.012500, -0.023125, -0.051875, -0.054375, -0.074375
#*# 	-0.040625, -0.014375, -0.004375, -0.003125, -0.001875, 0.013750, 0.022500, 0.001875, 0.007500, 0.001875, 0.025000, -0.030625, -0.037500, -0.031875, -0.065625
#*# 	0.003125, 0.009375, 0.016250, 0.025625, 0.018125, 0.021875, 0.021875, 0.024375, 0.031250, 0.032500, 0.033750, 0.019375, -0.004375, -0.037500, -0.031875
#*# 	-0.010625, 0.011250, 0.025625, 0.014375, 0.017500, 0.023750, 0.020625, 0.030625, 0.025625, 0.035625, 0.030625, -0.002500, 0.000000, -0.030000, -0.041875
#*# 	-0.008125, 0.004375, 0.010625, 0.010000, 0.001875, 0.006250, 0.014375, 0.021250, 0.027500, 0.018750, 0.023750, 0.023125, 0.009375, -0.021875, -0.031875
#*# 	-0.040625, -0.018750, -0.005625, 0.006250, 0.018750, 0.032500, 0.033750, 0.033125, 0.025000, 0.041250, 0.032500, 0.028125, 0.017500, 0.000000, -0.040625
#*# 	-0.032500, -0.029375, -0.000625, -0.015625, 0.022500, 0.018125, 0.017500, 0.024375, 0.027500, 0.033750, 0.033750, 0.025000, 0.000625, 0.000625, -0.041875
#*# 	-0.065000, -0.051250, -0.043750, -0.026250, -0.030000, 0.001250, -0.011250, -0.004375, 0.010625, -0.003125, 0.007500, 0.007500, -0.033125, -0.033750, -0.052500
#*# 	-0.078750, -0.045625, -0.046875, -0.051250, -0.042500, -0.036250, -0.005625, -0.002500, -0.001875, 0.019375, 0.011875, 0.012500, -0.030000, -0.046250, -0.051875
#*# 	-0.091875, -0.055000, -0.050625, -0.053125, -0.014375, -0.040000, -0.005625, -0.008125, 0.012500, 0.011250, 0.008750, -0.006875, -0.008125, -0.038750, -0.055000
#*# 	-0.096875, -0.086875, -0.053750, -0.054375, -0.040625, -0.021875, -0.039375, -0.013125, -0.007500, -0.016875, -0.026250, -0.030625, -0.041875, -0.051875, -0.076875
#*# 	-0.099375, -0.072500, -0.040000, -0.029375, -0.041875, -0.020625, -0.015625, -0.019375, -0.003125, -0.015625, -0.013750, -0.017500, -0.026875, -0.054375, -0.075000
#*# 	-0.083750, -0.049375, -0.057500, -0.033750, -0.043750, -0.028125, -0.005000, -0.034375, -0.015625, -0.012500, -0.024375, -0.050000, -0.060625, -0.057500, -0.085000
#*# 	-0.114375, -0.091250, -0.058750, -0.046875, -0.053750, -0.023125, -0.036250, -0.015625, -0.032500, -0.026875, -0.032500, -0.051875, -0.048750, -0.065625, -0.102500
#*# 	-0.139375, -0.118750, -0.096875, -0.071875, -0.061875, -0.023750, -0.025625, -0.048125, -0.050625, -0.026875, -0.016250, -0.058125, -0.086875, -0.087500, -0.088125
#*# x_count = 15
#*# y_count = 15
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.5
#*# min_x = 40.0
#*# max_x = 269.88
#*# min_y = 40.0
#*# max_y = 269.88
