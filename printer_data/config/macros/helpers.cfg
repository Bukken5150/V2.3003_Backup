#######################  Conditional QGL  #######################
[gcode_macro _CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}

#######################  Homing Conditional  #######################
[gcode_macro _CG28]
description: Helper: conditional homing
gcode:
    # command params
    # variables 
    {% set homed_axes = printer.toolhead.homed_axes %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}
    
    {% if ena_debug == "true" %}
        {action_respond_info('==== _CG28 ====')}
        {action_respond_info("homed_axes: %s" % (homed_axes|join(',')))}
    {% endif %}

    {% if homed_axes != "xyz" %}
        G90
        G28
    {% endif %}
    
#######################  Heat Soak #######################
[gcode_macro heat_soak]
gcode:
    {% set CHAMBER = params.CHAMBER|default(40)|float %}
    {% set FRAME = params.FRAME|default(35)|float %}
    {% if not printer["heater_generic heater_chamber"].temperature >= CHAMBER or printer["temperature_sensor frame"].temperature >= FRAME %}
    M117 Heat soaking started
    RESPOND MSG="Heat soaking started."
    STATUS_HOMING
    _CG28
    STATUS_BUSY
    G1 X150 Y150 F5000
    M106 S255
    M190 S110
    TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM=110
    SET_PIN PIN=nevermore VALUE=1
    RESPOND MSG="Nevermore ON."
    SET_CHAMBER CHAMBER_TEMP={CHAMBER} #set correct chamber target and let PID do its magi
    RESPOND MSG="Chamber fans on."
    TEMPERATURE_WAIT SENSOR="heater_generic heater_chamber" MINIMUM={CHAMBER-0.1} #wait until chamber temp is very nearly reached
    RESPOND MSG="Chamber reached {CHAMBER} degrees."
    TEMPERATURE_WAIT SENSOR="temperature_sensor frame" MINIMUM={FRAME}
    RESPOND MSG="Frame reached {FRAME} degrees."
    {% else %}
    M117 Chamber and frame at or above temp.
    RESPOND MSG="Chamber and frame at or above temp."
    {% endif %}

#######################  Pi Fan #######################
[gcode_macro PI_AUTO_FAN]
variable_check_interval: 15
gcode:
    #UPDATE_DELAYED_GCODE ID=PI_AUTO_FAN_LOOP DURATION={ check_interval }
    UPDATE_DELAYED_GCODE ID=PI_AUTO_FAN_LOOP DURATION=1 ## start it right away

[delayed_gcode PI_AUTO_FAN_LOOP]
gcode:
    {% set pi_auto_fan = printer['gcode_macro PI_AUTO_FAN']  %}
    {% set pi = printer["temperature_sensor raspberry_pi"] %}
    
    {% if pi.temperature >=30 or pi.temperature < 15.0 %}
       SET_FAN_SPEED FAN=pi_fan SPEED=1.0
       {% elif pi.temperature >=15 or pi.temperature < 40.0 %}
       SET_FAN_SPEED FAN=pi_fan SPEED=1.0
      {% elif pi.temperature >=40 or pi.temperature < 45.0 %}
       SET_FAN_SPEED FAN=pi_fan SPEED=1.0
    {% elif pi.temperature >=45 or pi.temperature < 50.0 %}
       SET_FAN_SPEED FAN=pi_fan SPEED=1.0
    {% else %}
       SET_FAN_SPEED FAN=pi_fan SPEED=1.0
    {% endif %}
    UPDATE_DELAYED_GCODE ID=PI_AUTO_FAN_LOOP DURATION={pi_auto_fan.check_interval}

[delayed_gcode autostart_pi_fan]
initial_duration: 1
gcode:
    
    ## Start pi fan
    PI_AUTO_FAN

######################### INPUT SHAPER CALIBRATION #########################
[gcode_macro ADXL_QUERY]
gcode:
        ACCELEROMETER_QUERY

#######################  Filter chamber macro  #######################
# [gcode_macro FILTER_CHAMBER]
# gcode:
#     {% set TEMP = params.TEMP|default(60)|float %}
#     STATUS_CLEANING
#     M117 Filtering chamber
#     RESPOND MSG="Filtering chamber."
#     #SET_PIN PIN=exhaust_fan VALUE=1
#     SET_PIN PIN=nevermore VALUE=1
#     TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={TEMP}
#     SET_PIN PIN=nevermore VALUE=0
#     #SET_PIN PIN=exhaust_fan VALUE=0
#     M117 Filtering DONE
#     RESPOND MSG="Filtering done."
#     STATUS_READY